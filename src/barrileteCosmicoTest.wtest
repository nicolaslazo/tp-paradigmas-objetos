import barrileteCosmico.*

describe "Barrilete Cósmico" {	
	
	const garlicsSea = new Localidad(
		nombre = "Garlic's Sea",
		equipajeImprescindible = ["Caña de Pescar, Piloto"],
		precio = 2500,
		kilometro = 1
	)

	const silversSea = new Localidad(
		nombre = "Silver's Sea",
		equipajeImprescindible = ["Protector Solar","Equipo de Buceo"],
		precio = 1350,
		kilometro = 3
	)

	const lastToninas = new Localidad(
		nombre = "Last Toninas",
		equipajeImprescindible = ["Vacuna Gripal", "Vacuna B", "Necronomicon"],
		precio = 3500,
		kilometro = 5
	)

	const goodAirs = new Localidad(
		nombre = "Good Airs",
		equipajeImprescindible = ["Cerveza", "Protector Solar"],
		precio = 1500,
		kilometro = 7
	)
	
	const aconcagua = new Montania(
		nombre = "Aconcagua",
		equipajeImprescindible = ["Escalador", "Agua", "Vacuna"],
		precio = 200,
		kilometro = 9,
		altura = 9000
	)
	
	const roma = new CiudadHistorica(
		nombre = "Roma",
		equipajeImprescindible = ["Escalador", "Agua"],
		precio = 2100,
		kilometro = 11,
		museos = ["coliseo","arte romano","torre de pizza","museo random"]
	)		
	
	const bondi = new Micro(
		tiempo = 100
	)
	
	
		const deAjoABsAs = new Viaje(
		localidadOrigen = garlicsSea,
		localidadDestino = goodAirs,
		medioDeTransporte = bondi
	)
	
	const pabloHari = new Usuario(
		userName = "PHari",
		viajes = [deAjoABsAs],
		saldo = 1500,
		seguidos = [],
		localidadDeOrigen = goodAirs,
		mochila = ["Protector Solar","Equipo de Buceo", "Cerveza", "Vacuna Gripal", "Vacuna B", "Necronomicon"],
		perfil = perfilEstudiantil
	)
	
	const pabloEmpresario = new Usuario(
		userName = "PEmpresario",
		viajes = [],
		saldo = 1500,
		seguidos = [],
		localidadDeOrigen = goodAirs,
		mochila = ["Protector Solar","Equipo de Buceo", "Cerveza", "Vacuna Gripal", "Vacuna B", "Necronomicon"],
		perfil = perfilEmpresarial
	)
	
	const barcoBarato = new Barco(
		tiempo = 120,
		probabilidadChoque = 0.0000000001
	)
	
	const bondiRapido = new Micro(
		tiempo = 50
	)
	
	const turbinaPulenta = new Turbina(
		nivelImpulso = 20
	)
	const turbinaPulenta2 = new Turbina(
		nivelImpulso = 20
	)

	const flyBondi = new Avion(
		tiempo = 5,
		turbinas = [turbinaPulenta,turbinaPulenta2]
	)
	
	fixture{
		barrileteCosmico.agregarLocalidad(garlicsSea)
		barrileteCosmico.agregarLocalidad(silversSea)
		barrileteCosmico.agregarLocalidad(lastToninas)
		barrileteCosmico.agregarLocalidad(goodAirs)
		barrileteCosmico.agregarLocalidad(aconcagua)
		barrileteCosmico.agregarLocalidad(roma)		
		barrileteCosmico.agregarMedioDeTransporte(bondi)
		barrileteCosmico.agregarMedioDeTransporte(flyBondi)
		barrileteCosmico.agregarMedioDeTransporte(bondiRapido)
		barrileteCosmico.agregarMedioDeTransporte(barcoBarato)	   
		
	}
		

	test "Obtener los destinos más importantes de Barrilete Cósmico" {
		assert.equals([garlicsSea,lastToninas,aconcagua,roma] , barrileteCosmico.destinosDestacados())
	}
	
	test "Aplicarle un 25% de descuento a Last Toninas" {
		lastToninas.aplicarDescuento(25)
		assert.equals(2625 , lastToninas.precio())
		assert.that(lastToninas.tieneEnEquipaje("Certificado de descuento"))
	}
	
	test "Averiguo si Silver's Sea es un destino peligroso, no lo es" {
		assert.notThat(silversSea.esPeligroso()) 
	}
	
	test "Aplicar un descuento del 15% a todos los destinos de Barrilete Cósmico" {
		barrileteCosmico.aplicarDescuentoADestinos(15)
		assert.equals(2125,garlicsSea.precio())
		assert.equals(1147.5,silversSea.precio())
		assert.equals(2975,lastToninas.precio())
		assert.equals(1275,goodAirs.precio())
		assert.that(barrileteCosmico.destinos().all({ destino => destino.tieneEnEquipaje("Certificado de descuento")}))		
	}
	
	test "Los destinos peligrosos son" {
		assert.equals([lastToninas,aconcagua,roma],barrileteCosmico.destinosPeligrosos()) 
	}
	
	test "Barrilete cosmico es empresa extrema?" {
		assert.that(barrileteCosmico.esEmpresaExtrema()) 
	}
	
	test "Conocer la carta de destinos de Barrilete Cósmico" {
		assert.equals("Garlic's Sea,Silver's Sea,Last Toninas,Good Airs,Aconcagua,Roma", barrileteCosmico.cartaDeDestinos()) 
	}
	
	test "Obtener los kilometros de PHari" {		
		assert.equals(6, pabloHari.kilometros()) 
	}
	
	test "Hacer que PHari vuele a Silver 's Sea." {
		var pHariASilversSea = barrileteCosmico.armarUnViaje(pabloHari, silversSea)
		assert.that(pabloHari.puedeViajar(pHariASilversSea)) 
		
		pabloHari.viajar(pHariASilversSea)
		
		assert.that(pabloHari.viajes().contains(pHariASilversSea)) 
		assert.equals(150, pabloHari.saldo()) 
	}	
	
	//Test Entrega 2
	
	test "La distancia entre Garlic's Sea y Good Airs es de 6" {
		assert.equals(6 ,goodAirs.distanciaA(garlicsSea)) 
	}
	
	test "El precio de un viaje desde Garlic's Sea a Good Airs en Micro es de 31500" {
		assert.equals(31500 ,deAjoABsAs.precio()) 
	}	
	
	test "La localidad de origen de un viaje armado para PHari es Good Airs"{
		var unViaje = barrileteCosmico.armarUnViaje(pabloHari, silversSea)
		assert.equals(goodAirs, unViaje.localidadOrigen())
	}	
	
	test "La localidad de origen de pablo luego de viajar a Silver 's Sea sera esa localidad" {
		assert.that(pabloHari.puedeViajar(silversSea)) 
		
		var viaje = barrileteCosmico.armarUnViaje(pabloHari, silversSea)
		
		pabloHari.viajar(viaje)
		
		assert.equals(pabloHari.localidadDeOrigen(), silversSea) 		
	}	
	
	test "El coste de Pablo Hari para viajar en fly bondi a Silver sea sera de 1350" {
		assert.that(pabloHari.puedeViajar(silversSea)) 
		
		var viaje = barrileteCosmico.armarUnViaje(pabloHari, silversSea)
		
		assert.equals(1350 ,viaje.precio()) 			
	}	
	
	test "El Aconcagua es una localidad peligrosa" {
		assert.that(aconcagua.esPeligroso()) 
	}	//si quieren hacer localidad que no sea peligrosa
	
	test "Roma es una ciudad destacada" {
		assert.that(roma.esDestacado()) 
	}		//si quieren hacer localidad que no sea destacada	

	test "Pablo el empresario eligiria como medio de transporte a flyBondi" {
		var viaje = barrileteCosmico.armarUnViaje(pabloEmpresario,roma)
		assert.equals(flyBondi,viaje.medioDeTransporte()) 
	}	
	
	test "Pablo Hari eligiria como medio de transporte para viajar a bs as a fly bondi " {
		var viaje = barrileteCosmico.armarUnViaje(pabloHari,goodAirs)
		assert.equals(flyBondi,viaje.medioDeTransporte()) 
	}	
	
	//ver como manejar test de excepciones
	test "Pablo no podria viajar al Last Toninas porque no tiene plata" {		
		
		assert.throwsException({barrileteCosmico.armarUnViaje(pabloHari,lastToninas)})
	}		
	
	test "Pablo no podria viajar al Aconcagua porque no tiene equipaje necesario" {	
        var viaje = barrileteCosmico.armarUnViaje(pabloHari,aconcagua)
		assert.throwsException({pabloHari.viajar(goodAirs)})
	}		
	
}
