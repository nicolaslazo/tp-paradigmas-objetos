import barrileteCosmico.*

describe "Barrilete Cósmico" {	
	
	const garlicsSea = new Localidad(
		nombre = "Garlic's Sea",
		equipajeImprescindible = ["Caña de Pescar, Piloto"],
		precio = 2500,
		kilometro = 550
	)

	const silversSea = new Localidad(
		nombre = "Silver's Sea",
		equipajeImprescindible = ["Protector Solar","Equipo de Buceo"],
		precio = 1350,
		kilometro = 650
	)

	const lastToninas = new Localidad(
		nombre = "Last Toninas",
		equipajeImprescindible = ["Vacuna Gripal", "Vacuna B", "Necronomicon"],
		precio = 3500,
		kilometro = 530
	)

	const goodAirs = new Localidad(
		nombre = "Good Airs",
		equipajeImprescindible = ["Cerveza", "Protector Solar"],
		precio = 1500,
		kilometro = 100
	)
	
	
	
	const pabloHari = new Usuario(
		userName = "PHari",
		viajes = [],
		saldo = 1500,
		seguidos = [],
		localidadDeOrigen = goodAirs,
		mochila = ["Protector Solar","Equipo de Buceo", "Cerveza", "Vacuna Gripal", "Vacuna B", "Necronomicon"],
		perfil = perfilEmpresarial
	)
	
	const bondi = new MedioDeTransporte(
		costoPorKm = 4,
		tiempo  = 300
	)
	
	const deAjoABsAs = new Viaje(
		localidadOrigen = garlicsSea,
		localidadDestino = goodAirs,
		medioDeTransporte = bondi
	)
	
	fixture{
		barrileteCosmico.agregarLocalidad(garlicsSea)
		barrileteCosmico.agregarLocalidad(silversSea)
		barrileteCosmico.agregarLocalidad(lastToninas)
		barrileteCosmico.agregarLocalidad(goodAirs)
		barrileteCosmico.agregarMedioDeTransporte(bondi)
	}
		

	test "Obtener los destinos más importantes de Barrilete Cósmico" {
		assert.equals([garlicsSea,lastToninas] , barrileteCosmico.destinosDestacados())
	}
	
	test "Aplicarle un 25% de descuento a Last Toninas" {
		lastToninas.aplicarDescuento(25)
		assert.equals(2625 , lastToninas.precio())
		assert.that(lastToninas.tieneEnEquipaje("Certificado de descuento"))
	}
	
	test "Averiguo si Silver's Sea es un destino peligroso, no lo es" {
		assert.notThat(silversSea.esPeligroso()) 
	}
	
	test "Aplicar un descuento del 15% a todos los destinos de Barrilete Cósmico" {
		barrileteCosmico.aplicarDescuentoADestinos(15)
		assert.equals(2125,garlicsSea.precio())
		assert.equals(1147.5,silversSea.precio())
		assert.equals(2975,lastToninas.precio())
		assert.equals(1275,goodAirs.precio())
		assert.that(barrileteCosmico.destinos().all({ destino => destino.tieneEnEquipaje("Certificado de descuento")}))		
	}
	
	test "Los destinos peligrosos son" {
		assert.equals([lastToninas],barrileteCosmico.destinosPeligrosos()) 
	}
	
	test "Barrilete cosmico es empresa extrema?" {
		assert.that(barrileteCosmico.esEmpresaExtrema()) 
	}
	
	test "Conocer la carta de destinos de Barrilete Cósmico" {
		assert.equals("Garlic's Sea,Silver's Sea,Last Toninas,Good Airs", barrileteCosmico.cartaDeDestinos()) 
	}
	
	test "Obtener los kilometros de PHari" {
		var pHariDeBsAsAToninas = barrileteCosmico.armarUnViaje(pabloHari, lastToninas)
		pabloHari.viajar(pHariDeBsAsAToninas)
		var pHariDeToninasABsAs = barrileteCosmico.armarUnViaje(pabloHari, goodAirs)
		pabloHari.viajar(pHariDeToninasABsAs)
		
		assert.equals(860, pabloHari.kilometros()) 
	}
	
	test "Hacer que PHari vuele a Silver 's Sea." {
		var pHariASilversSea = barrileteCosmico.armarUnViaje(pabloHari, silversSea)
		assert.that(pabloHari.puedeViajar(pHariASilversSea)) 
		
		pabloHari.viajar(pHariASilversSea)
		
		assert.that(pabloHari.viajes().contains(pHariASilversSea)) 
		assert.equals(150, pabloHari.saldo()) 
	}	
	
	//Test Entrega 2
	
	test "La distancia entre Garlic's Sea y Good Airs es de 450" {
		assert.equals(450 ,goodAirs.distanciaA(garlicsSea)) 
	}
	
	test "El precio de un viaje desde Garlic's Sea a Good Airs en bondi es de 3300" {
		assert.equals(3300 ,deAjoABsAs.precio()) 
	}	
	
	test "La localidad de origen de un viaje armado para PHari es Good Airs"{
		var unViaje = barrileteCosmico.armarUnViaje(pabloHari, garlicsSea)
		assert.equals(goodAirs, unViaje.localidadOrigen())
	}	
	
	test "La localidad de origen de pablo luego de viajar a Silver 's Sea sera esa localidad" {
		assert.that(pabloHari.puedeViajar(silversSea)) 
		
		var viaje = barrileteCosmico.armarUnViaje(pabloHari, silversSea)
		
		pabloHari.viajar(viaje)
		
		assert.equals(pabloHari.localidadDeOrigen(), silversSea) 		
	}	
}
